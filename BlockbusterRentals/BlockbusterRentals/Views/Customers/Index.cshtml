
@*@model IEnumerable<BlockbusterRentals.Models.Customer>*@
@*
    Course Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@

@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>
@* no more Model used or passed to index page, since the index page table is loading data in JSON from server, to populate the table locally on client
    @if (!Model.Any())
    {
        <p>We don't have any customers yet.</p>
    }
    else
    {*@
<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @**foreach (var customer in Model)
            {
                <tr>
                    <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
                    <td>@customer.MembershipType.Name</td>
                    <td>
                        <button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button>
                    </td>

                </tr>
            }No need to render on server anymore, since the client jQuery is handling it*@
    </tbody>
</table>
@*}*@

@section scripts
{
    <script>
        $(document).ready(function () {

            var table = $(customers).DataTable({ //storing it as a table allows it to be reloaded and altered more easily

                ajax: {
                    url: "/api/customers",
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name",
                        render: function (data, type, customer) { //customer is the "row" element
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }

                    },

                    {
                        data: "membershipType.name"
                    },

                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>"
                        }
                    }
                ]

            });

            //$("#customers .js-delete").on("click", function () { IN EFFICIENT, because method PER delete button stored in memory
            // Better way is as follows:
            $("#customers").on("click", ".js-delete", function () { // now matches 1 hgandler (cusgtomers) instead of 100s handler matching (customer, js-delete)
                var button = $(this);
                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    if (result) {
                        // Call the API using jQuery Ajax
                        //$ is the symbol for jQuery.
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw();

                            }

                        });
                    }

                });


            });


        }); // standard jQuery function
    </script>
}